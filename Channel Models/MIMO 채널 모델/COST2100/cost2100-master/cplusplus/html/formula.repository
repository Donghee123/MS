\form#0:\[ cos(\phi)cos(\theta) -sin(\phi) cos(\phi)sin(\theta) sin(\phi)cos(\theta) cos(\phi) sin(\phi)cos(\theta) -sin(\theta) 0 cos(\theta) \]
\form#1:\[ \cos(\phi)\cos(\theta) & -\sin(\phi) & \cos(\phi)\sin(\theta) \sin(\phi)\cos(\theta) & \cos(\phi) & \sin(\phi)\cos(\theta) -\sin(\theta) & 0 & \cos(\theta) \]
\form#2:\[[x,y,z]\]
\form#3:\[[phi(a) theta(e) r] SPH2CART: [phi(a) theta(e) r] to [x y z] POL2CART: [phi(angle) r z] to [x y z] CART2POL: [x y z] to [phi(angle) r z] */ inline vec coordinate_transformation(double a, double b, double c, const COOR_TRANS_TYPE ct_type) { vec output = zeros(3); switch (ct_type) { case CART2SPH: output.set(0, atan(b / a)); output.set(1, atan(c / sqrt(pow(a, 2) + pow(b, 2)))); output.set(2, sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))); break; case SPH2CART: output.set(0, c * cos(b) * cos(a)); output.set(1, c * cos(b) * sin(a)); output.set(2, c * sin(b)); break; case POL2CART: output.set(0, b * cos(a)); output.set(1, b * sin(a)); output.set(2, c); break; case CART2POL: output.set(0, atan(b / a)); output.set(1, sqrt(pow(a, 2) + pow(b, 2))); output.set(2, c); break; } return output; } //! Transform the coordinates according to the coordinate transformation type inline vec coordinate_transformation(const vec &input, const COOR_TRANS_TYPE ct_type) { if (input.length() != 3) return zeros(3); return coordinate_transformation(input.get(0), input.get(1), input.get(2), ct_type); } //! Generate random number according to the distribution parameters inline double get_random_number(const PDF_TYPE pdf_type, const vec &para) { double output; switch (pdf_type) { case NORMAL: output = para.get(0) + randn() * para.get(1); break; case UNIFORM: output = randu() * (para.get(1) - para.get(0)) + para.get(0); break; case POISSON: output = get_Poisson_number(para.get(0)); break;} return output; } //! Calculate the distance between two positions inline double calc_dist(const vec &pos1, const vec &pos2) { if (pos1.length() != pos2.length()) { ERROR("calc_dist(): Two positions cannot be of different dimensions!"); return 0; } vec pos = pos1 - pos2; double dist = 0; for (int i = 0; i < pos.length(); i ++) dist += pow(pos.get(i), 2); return sqrt(dist); } //! Calculate the distance between one position and a set of other positions inline vec calc_dist(const vec &pos1, const Vec<vec> &pos2) { vec dists; for (int i = 0; i < pos2.length(); i ++) dists.ins(i, calc_dist(pos1, pos2.get(i))); return dists; } //! Calculate the distance between one position and a set of other positions inline vec calc_dist(const vec &pos1, const mat &pos2) { vec dists; for (int i = 0; i < pos2.rows(); i ++) dists.ins(i, calc_dist(pos1, pos2.get_row(i))); return dists; } /*! Generate a 3x3 rotation matrix by given rotation in azimuth \f$\phi\f$ and elevation \f$theta\f$, assume \f$\delta = 0\f$ The rotation matrix is \f[ \left\[ \cos(\phi)\cos(\theta) -\sin(\phi) \cos(\phi)\sin(\theta) \sin(\phi)\cos(\theta) \cos(\phi) \sin(\phi)\cos(\theta) -\sin(\theta) 0 \cos(\theta) \right\] \]
\form#4:$[x,y,z]$
\form#5:$[\phi, \theta, r]$
\form#6:$\phi$
\form#7:$theta$
\form#8:$\delta = 0$
\form#9:\[ \left\[ \cos(\phi)\cos(\theta) -\sin(\phi) \cos(\phi)\sin(\theta) \sin(\phi)\cos(\theta) \cos(\phi) \sin(\phi)\cos(\theta) -\sin(\theta) 0 \cos(\theta) \right\] \]
\form#10:\[ \left [ \cos(\phi)\cos(\theta) -\sin(\phi) \cos(\phi)\sin(\theta) \sin(\phi)\cos(\theta) \cos(\phi) \sin(\phi)\cos(\theta) -\sin(\theta) 0 \cos(\theta) \right ] \]
\form#11:$[\varphi, \theta, r]$
\form#12:\[ \left [ \cos(\varphi)\cos(\theta) -\sin(\varphi) \cos(\varphi)\sin(\theta) \\ \sin(\varphi)\cos(\theta) \cos(\varphi) \sin(\varphi)\cos(\theta) \\ -\sin(\theta) 0 \cos(\theta) \right ] \]
\form#13:$\varphi$
\form#14:$\theta$
\form#15:\[ \left [ \cos(\varphi)\cos(\theta) & -\sin(\varphi) & \cos(\varphi)\sin(\theta) \\ \sin(\varphi)\cos(\theta) & \cos(\varphi) & \sin(\varphi)\cos(\theta) \\ -\sin(\theta) & 0 & \cos(\theta) \right ] \]
\form#16:\begin{eqnarray*} \left [ \cos(\varphi)\cos(\theta) & -\sin(\varphi) & \cos(\varphi)\sin(\theta) \\ \sin(\varphi)\cos(\theta) & \cos(\varphi) & \sin(\varphi)\cos(\theta) \\ -\sin(\theta) & 0 & \cos(\theta) \right ] \end{eqnarray*}
\form#17:\begin{eqnarray*} \left[ \cos(\varphi)\cos(\theta) & -\sin(\varphi) & \cos(\varphi)\sin(\theta) \\ \sin(\varphi)\cos(\theta) & \cos(\varphi) & \sin(\varphi)\cos(\theta) \\ -\sin(\theta) & 0 & \cos(\theta) \right] \end{eqnarray*}
\form#18:\begin{eqnarray*} \left[\cos(\varphi)\cos(\theta) & -\sin(\varphi) & \cos(\varphi)\sin(\theta) \\ \sin(\varphi)\cos(\theta) & \cos(\varphi) & \sin(\varphi)\cos(\theta) \\ -\sin(\theta) & 0 & \cos(\theta)\right] \end{eqnarray*}
\form#19:\begin{eqnarray*} \cos(\varphi)\cos(\theta) & -\sin(\varphi) & \cos(\varphi)\sin(\theta) \\ \sin(\varphi)\cos(\theta) & \cos(\varphi) & \sin(\varphi)\cos(\theta) \\ -\sin(\theta) & 0 & \cos(\theta) \end{eqnarray*}
\form#20:$[x, y, z]$
\form#21:$[\varphi, r, z]$
\form#22:\begin{eqnarray*} \left(\cos(\varphi)\cos(\theta) & -\sin(\varphi) & \cos(\varphi)\sin(\theta) \\ \sin(\varphi)\cos(\theta) & \cos(\varphi) & \sin(\varphi)\cos(\theta) \\ -\sin(\theta) & 0 & \cos(\theta)\right) \end{eqnarray*}
\form#23:\begin{eqnarray*} \left\[\cos(\varphi)\cos(\theta) & -\sin(\varphi) & \cos(\varphi)\sin(\theta) \\ \sin(\varphi)\cos(\theta) & \cos(\varphi) & \sin(\varphi)\cos(\theta) \\ -\sin(\theta) & 0 & \cos(\theta)\right\] \end{eqnarray*}
\form#24:\begin{eqnarray*} \left|\cos(\varphi)\cos(\theta) & -\sin(\varphi) & \cos(\varphi)\sin(\theta) \\ \sin(\varphi)\cos(\theta) & \cos(\varphi) & \sin(\varphi)\cos(\theta) \\ -\sin(\theta) & 0 & \cos(\theta)\right| \end{eqnarray*}
\form#25:\begin{bmatrix} \cos(\varphi)\cos(\theta) & -\sin(\varphi) & \cos(\varphi)\sin(\theta) \\ \sin(\varphi)\cos(\theta) & \cos(\varphi) & \sin(\varphi)\cos(\theta) \\ -\sin(\theta) & 0 & \cos(\theta) \end{bmatrix}
\form#26:\begin{equation*} \f{bmatrix} \cos(\varphi)\cos(\theta) & -\sin(\varphi) & \cos(\varphi)\sin(\theta) \\ \sin(\varphi)\cos(\theta) & \cos(\varphi) & \sin(\varphi)\cos(\theta) \\ -\sin(\theta) & 0 & \cos(\theta) \end{equation*}
\form#27:\begin{eqnarray*} & \cos(\varphi)\cos(\theta) & -\sin(\varphi) & \cos(\varphi)\sin(\theta) &\\ & \sin(\varphi)\cos(\theta) & \cos(\varphi) & \sin(\varphi)\cos(\theta) &\\ & -\sin(\theta) & 0 & \cos(\theta) & \end{eqnarray*}
\form#28:\begin{eqnarray*}ccc}{ \cos(\varphi)\cos(\theta) & -\sin(\varphi) & \cos(\varphi)\sin(\theta) \\ \sin(\varphi)\cos(\theta) & \cos(\varphi) & \sin(\varphi)\cos(\theta) \\ -\sin(\theta) & 0 & \cos(\theta) \end{eqnarray*}
